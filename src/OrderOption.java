
import java.awt.print.PrinterException;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.*;
import java.awt.print.*;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import jdk.nashorn.internal.runtime.JSType;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 123
 */
public class OrderOption extends javax.swing.JFrame {

    /**
     * Creates new form OrderOption
     */
    public OrderOption() {
        initComponents();
         totalTextfield.setEditable(false);
          CutomerIDTextfield.setEditable(false);
       // getSum();
    }
    
    
//    public void getSum()
//    {
//        int sum=0;
//        for(int i=0; i< ProductsTable.getRowCount(); i++)
//        {
//            sum=sum+Integer.parseInt(ProductsTable.getValueAt(i, 4).toString());
//            
//        }
//        totalTextfield.setText(Integer.toString(sum));
//    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogoutButton = new javax.swing.JButton();
        ViewCustomerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        ViewProducts = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CutomerIDTextfield = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        Clear = new javax.swing.JButton();
        RemoveSelectedRows = new javax.swing.JButton();
        total = new javax.swing.JButton();
        totalTextfield = new javax.swing.JTextField();
        ConfirmOrder = new javax.swing.JButton();
        PrintReciept = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        SelectedCustomeIDTable = new javax.swing.JTable();
        SelectIDButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        GoBackButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        ViewCustomerButton.setText("View Customer");
        ViewCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCustomerButtonActionPerformed(evt);
            }
        });

        CustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CustomerID", "CustomerName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CustomerTable);

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "ProductName", "ProductQuantity", "productPrice", "ProductDescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ProductsTable);

        ViewProducts.setText("View Products");
        ViewProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewProductsActionPerformed(evt);
            }
        });

        jButton1.setText("Insert Selected Product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter Customer ID:");

        CutomerIDTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutomerIDTextfieldActionPerformed(evt);
            }
        });

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "ProductName", "ProductQuantity", "ProductPrice", "QuantityXPrice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(OrderTable);

        Clear.setText("Clear Ordered Products");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        RemoveSelectedRows.setText("Remove Selected Row");
        RemoveSelectedRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedRowsActionPerformed(evt);
            }
        });

        total.setText("Total:");
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        totalTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextfieldActionPerformed(evt);
            }
        });

        ConfirmOrder.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ConfirmOrder.setText("Confirm Order");
        ConfirmOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmOrderActionPerformed(evt);
            }
        });

        PrintReciept.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        PrintReciept.setText("Print Reciept");
        PrintReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintRecieptActionPerformed(evt);
            }
        });

        SelectedCustomeIDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CustomerID", "CustomerName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(SelectedCustomeIDTable);

        SelectIDButton.setText("Select ID");
        SelectIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectIDButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText("Order Option");

        GoBackButton1.setText("<----   Go back");
        GoBackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoBackButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(GoBackButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogoutButton))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 993, Short.MAX_VALUE)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PrintReciept, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ConfirmOrder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Clear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveSelectedRows)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CutomerIDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectIDButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(ViewCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                            .addComponent(ViewProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(jLabel3)
                .addGap(233, 233, 233)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogoutButton)
                    .addComponent(GoBackButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewProducts)
                    .addComponent(ViewCustomerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CutomerIDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SelectIDButton)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Clear)
                    .addComponent(RemoveSelectedRows))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total)
                    .addComponent(totalTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfirmOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrintReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        this.dispose();
        MainPage c=new MainPage();
        c.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void ViewCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCustomerButtonActionPerformed

          PreparedStatement ps;
       ResultSet rs;
       String query="SELECT `CustomerID`, `CustomerName` FROM `customer`"; 
       
        try {
            ps=MyConnection.getConnection().prepareStatement(query);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)CustomerTable.getModel();
            tm.setRowCount(0);
            
            while(rs.next())
            {
                Object o[]={rs.getInt("CustomerID"), rs.getString("CustomerName") };
                tm.addRow(o);
                
            }
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }



// TODO add your handling code here:
    }//GEN-LAST:event_ViewCustomerButtonActionPerformed

    private void ViewProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewProductsActionPerformed

        
       PreparedStatement ps;
       ResultSet rs;
       String query="SELECT * FROM products"; 
       
        try {
            ps=MyConnection.getConnection().prepareStatement(query);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)ProductsTable.getModel();
            tm.setRowCount(0);
            
            while(rs.next())
            {
                Object o[]={rs.getInt("ProductID"), rs.getString("ProductName"), rs.getInt("ProductQuantity"), rs.getInt("ProductPrice"), rs.getString("ProductDescription") };
                tm.addRow(o);
                
            }
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_ViewProductsActionPerformed

    private void CutomerIDTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutomerIDTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CutomerIDTextfieldActionPerformed

String q;    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

int a, b;
        
        q=JOptionPane.showInputDialog(null, "Enter Quantity");
        if (!q.equals(""))
        {
            
        
        int abc, def; 
        
        abc=Integer.parseInt(q); //entered quantity
        def=Integer.parseInt(quantity); //total quantity
        if(def>=abc)
        {
           
        
        TableModel model1=ProductsTable.getModel();
        int cols=ProductsTable.getColumnCount();
        int rowCount=ProductsTable.getRowCount();
        int indexs[]=ProductsTable.getSelectedRows();
        Object[] row=new Object[5];
        DefaultTableModel model2=(DefaultTableModel)OrderTable.getModel();
        
        
        for(int i=0; i<indexs.length; i++)
        {
           
            row[0]= model1.getValueAt(indexs[i], 0);
          
        
        row[1]= model1.getValueAt(indexs[i], 1);
        row[2]= q;
        row[3]= model1.getValueAt(indexs[i], 3);
        a=JSType.toInt32(row[2]) ;
        b=JSType.toInt32(row[3]);
       row[4]=a*b;
       
        
          model2.addRow(row);  
        }
       
        }
         else
        {
                JOptionPane.showMessageDialog(null, "Invalid Quantity");
        
        
        }
        
        
        }
        else{
            JOptionPane.showMessageDialog(null, "Please enter a value to proceed");
        }
        
                









// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        
OrderTable.setModel(new DefaultTableModel (null, new String[]{"ProductID", "ProductName", "ProductQuantity", "ProductPrice", "ProductDescription"}));
    









// TODO add your handling code here:
    }//GEN-LAST:event_ClearActionPerformed

    private void RemoveSelectedRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedRowsActionPerformed

       DefaultTableModel model= (DefaultTableModel)OrderTable.getModel();
       
       try{
           int SelectedRowIndex=OrderTable.getSelectedRow();
           model.removeRow(SelectedRowIndex);
       }catch(Exception ex)
       {
           JOptionPane.showMessageDialog(null, ex);
       }


// TODO add your handling code here:
    }//GEN-LAST:event_RemoveSelectedRowsActionPerformed

    private void totalTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextfieldActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextfieldActionPerformed

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
  int z=0;
  for(int y=0; y<OrderTable.getRowCount(); y++)
  {
      z+=Integer.parseInt(OrderTable.getValueAt(y, 4).toString());
      
  }
  totalTextfield.setText(z+".00");
        


// TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void ConfirmOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmOrderActionPerformed

        String CustomerID;
        String total;
        int z;
        int s;
        CustomerID=CutomerIDTextfield.getText();
        total=totalTextfield.getText();
        
         if(CustomerID.equals("") || total.equals(""))
       {
            JOptionPane.showMessageDialog(null, "Please enter values in the missing field(s)");
            return;
       }
         
          PreparedStatement ps;
       String query="INSERT INTO `order`( `CustomerID`, `total`) VALUES (?, ?)";
        try {
            ps=MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, CustomerID);
            ps.setString(2, total);
            
             if (OrderTable.getRowCount()==0)
            {
               JOptionPane.showMessageDialog(null, "Please insert value in the order table first");
               return;

            }
           
            
            if(ps.executeUpdate()>0)
            {
                CutomerIDTextfield.setText("");
                totalTextfield.setText("");
               
                JOptionPane.showMessageDialog(null, "Order Placed and saved in ORDER table");
               // PreparedStatement ps2;
                
                
                for(int y=0; y<OrderTable.getRowCount(); y++)
  {
      
         PreparedStatement ps2;

      String query2="UPDATE `products` SET `ProductQuantity`=`ProductQuantity`-? WHERE `ProductID`=?";
         
     ps2=MyConnection.getConnection().prepareStatement(query2);
      
      
      s=Integer.parseInt(OrderTable.getValueAt(y, 2).toString());
      z=Integer.parseInt(OrderTable.getValueAt(y, 0).toString());
      
       ps2.setInt(1, s);
     ps2.setInt(2,z);
     ps2.executeUpdate();
     
  } 
                
               
  
               
            }
            else
            {
                JOptionPane.showMessageDialog(null, "error while placing order");
            }
            
 
            
// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(AddCustomerEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
      
        




// TODO add your handling code here:
    }//GEN-LAST:event_ConfirmOrderActionPerformed

    private void PrintRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintRecieptActionPerformed

        
          MessageFormat header=new MessageFormat("Reciept");     
          MessageFormat footer=new MessageFormat("Page {0, number, integer}");
          
          
          MessageFormat header1=new MessageFormat("Customer Information");
          MessageFormat footer2=new MessageFormat("");
        try
        {
            
            OrderTable.print(JTable.PrintMode.NORMAL, header, footer);
            SelectedCustomeIDTable.print(JTable.PrintMode.NORMAL, header1, footer);
           
            
            
            
        }catch(PrinterException ex)
        {
            System.err.format("Cannot print %s%n", ex.getMessage());
        }
        
        
        
    }//GEN-LAST:event_PrintRecieptActionPerformed

    private void SelectIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectIDButtonActionPerformed
       String CustomerID=CutomerIDTextfield.getText();
       
       if(CustomerID.equals(""))
       {
            JOptionPane.showMessageDialog(null, "Please enter values in the missing field(s)");
       }
       PreparedStatement ps;
       ResultSet rs;
        
       
        try {
            String query="SELECT * FROM `customer` WHERE`CustomerID`=?";
            
            ps=MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, CustomerID);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)SelectedCustomeIDTable.getModel();
            tm.setRowCount(0);
            
            while(rs.next())
            {
                Object o[]={rs.getInt("CustomerID"), rs.getString("CustomerName") };
                tm.addRow(o);
                
            }
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        



// TODO add your handling code here:
    }//GEN-LAST:event_SelectIDButtonActionPerformed
String quantity;
    private void ProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsTableMouseClicked

         PreparedStatement ps;
         ResultSet rs;
         try{
             
             int row=ProductsTable.getSelectedRow();
             String tableClicked=(ProductsTable.getModel().getValueAt(row, 0).toString());
             String query="SELECT  `ProductQuantity` FROM `products` WHERE `ProductID` =?";
              ps=MyConnection.getConnection().prepareStatement(query);
              ps.setString(1, tableClicked);
              rs=ps.executeQuery();
              
              if(rs.next())
              {
                   quantity=rs.getString("ProductQuantity");
              }
              jLabel3.setText("");
               
             
         }
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}


































// TODO add your handling code here:
    }//GEN-LAST:event_ProductsTableMouseClicked

    String ID;
    private void CustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerTableMouseClicked

        

 PreparedStatement ps;
         ResultSet rs;
         try{
             
             int row=CustomerTable.getSelectedRow();
             String tableClicked=(CustomerTable.getModel().getValueAt(row, 0).toString());
             String query="SELECT `CustomerID`, `CustomerName` FROM `customer` WHERE `CustomerID` =?";
              ps=MyConnection.getConnection().prepareStatement(query);
              ps.setString(1, tableClicked);
              rs=ps.executeQuery();
              
              if(rs.next())
              {
                   ID=rs.getString("CustomerID");
              }
              CutomerIDTextfield.setText(ID);
               
             
         }
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}





// TODO add your handling code here:
    }//GEN-LAST:event_CustomerTableMouseClicked

    private void GoBackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoBackButton1ActionPerformed
        this.dispose();
        CustomerOptions a=new CustomerOptions();
        a.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_GoBackButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderOption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton ConfirmOrder;
    private javax.swing.JTable CustomerTable;
    private javax.swing.JTextField CutomerIDTextfield;
    private javax.swing.JButton GoBackButton1;
    private javax.swing.JButton LogoutButton;
    public javax.swing.JTable OrderTable;
    private javax.swing.JButton PrintReciept;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JButton RemoveSelectedRows;
    private javax.swing.JButton SelectIDButton;
    private javax.swing.JTable SelectedCustomeIDTable;
    private javax.swing.JButton ViewCustomerButton;
    private javax.swing.JButton ViewProducts;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton total;
    public javax.swing.JTextField totalTextfield;
    // End of variables declaration//GEN-END:variables
}
